#BlueJ class context
comment0.params=input
comment0.target=boolean\ isNice(java.lang.String)
comment1.params=input
comment1.target=boolean\ repeats(java.lang.String)
comment2.params=input
comment2.target=boolean\ checkPairs(java.lang.String)
comment3.params=inputs
comment3.target=int\ countNice(java.lang.String)
comment3.text=\n\ \ \ \ private\ static\ boolean\ checkVowels(String\ input){//check\ to\ see\ if\ there\ are\ at\ least\ 3\ vowels.\n\ \ \ \ \ \ \ \ int\ vowelCount\=0;\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ input.length();\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ char\ c\ \=\ input.charAt(i);\n\ \ \ \ \ \ \ \ \ \ \ \ if(isVowel(c)){//checks\ if\ an\ individual\ char\ is\ a\ vowel\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ vowelCount++;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ //System.out.println("Vowel\ Count\:\ "\ +\ vowelCount);\n\ \ \ \ \ \ \ \ \ \ \ \ if(vowelCount\ \=\=\ 3){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println("Returning\ with\ vowel\ count\ of\:\ "\ +\ vowelCount);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ return\ false;\n\ \ \ \ }\n\ \ \ \ \n\ \ \ \ private\ static\ boolean\ isVowel(char\ c){//compare\ a\ char\ to\ the\ vowels\ in\ the\ vowel\ array\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ vowels.length;\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ if(vowels[i]\ \=\=\ c){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ return\ false;\n\ \ \ \ }\n\ \ \ \ \n\ \ \ \ private\ static\ boolean\ checkDouble(String\ input){//compare\ a\ char\ to\ the\ next\ char\ and\ see\ if\ they\ are\ the\ same\n\ \ \ \ \ \ \ \ //compare\ current\ index\ with\ next\ index.\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ input.length()-1;\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ char\ c\ \=\ input.charAt(i);\n\ \ \ \ \ \ \ \ \ \ \ \ char\ d\ \=\ input.charAt(i+1);\n\ \ \ \ \ \ \ \ \ \ \ \ if(c\ \=\=\ d){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println("cd\:\ "\ +\ c\ +\ d);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ return\ false;\n\ \ \ \ }\n\ \ \ \ \n\ \ \ \ private\ static\ boolean\ checkDisallowed(String\ input){//combine\ a\ char\ with\ the\ next\ char,\ and\ see\ if\ this\ combo\ is\ in\ the\ disallowed\ list\n\ \ \ \ \ \ \ \ //compare\ current\ index\ with\ next\ and\ create\ string\ to\ compare\ to\ disallowed\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ input.length()-1;\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ char\ c\ \=\ input.charAt(i);\n\ \ \ \ \ \ \ \ \ \ \ \ char\ d\ \=\ input.charAt(i+1);\n\ \ \ \ \ \ \ \ \ \ \ \ String\ s\ \=\ new\ StringBuilder().append(c).append(d).toString();\n\ \ \ \ \ \ \ \ \ \ \ \ for(int\ j\ \=\ 0;\ j\ <\ disallowed.length;\ j++){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(disallowed[j].equals(s)){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println("Returning\ false,\ found\ disallowed\:\ "\ +\ s);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ false;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ //System.out.println("Returning\ true,\ no\ disallowed\ pairs.");\n\ \ \ \ \ \ \ \ return\ true;\n\ \ \ \ }\n
comment4.params=
comment4.target=void\ test()
numComments=5
